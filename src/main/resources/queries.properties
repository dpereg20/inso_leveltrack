# Queries para Login
user.findByEmailAndPassword=SELECT * FROM Users WHERE email = ? AND password = SHA2(?, 256)


# Queries para Usuarios
user.findById=SELECT id, name, email, role, password FROM Users WHERE id = ?
user.findAll=SELECT * FROM Users
user.insert=INSERT INTO Users (name, email, password, role) VALUES (?, ?, SHA2(?, 256), ?)
user.update=UPDATE Users SET name = ?, email = ?, password = SHA2(?, 256), role = ? WHERE id = ?
user.delete=DELETE FROM Users WHERE id = ?
user.updateProfile=UPDATE Users SET name = ?, email = ?, password = SHA2(?, 256) WHERE id = ?
user.updateRole=UPDATE Users SET role = ? WHERE id = ?
user.emailExists=SELECT id FROM Users WHERE email = ?


# Queries para Juegos
game.add=INSERT INTO Games (name, genre, price) VALUES (?, ?, ?)
game.existsByName=SELECT 1 FROM Games WHERE name = ?
game.findByName=SELECT id, name, genre, price FROM Games WHERE name = ?
game.addGame=INSERT INTO Games (name, genre, price) VALUES (?, ?, ?);
game.updateGame=UPDATE Games SET name = ?, genre = ?, price = ? WHERE id = ?;
game.deleteGame=DELETE FROM Games WHERE id = ?;
# Check if a game exists in the database
game.isGameInDatabase=SELECT id FROM Games WHERE name = ?;
# Get game details by name
game.getGameByName=SELECT id, name, genre, price FROM Games WHERE name = ?;
# Retrieve all games from the database
game.findAll=SELECT id, name, genre, price FROM Games ORDER BY name ASC
# Retrieve games by genre
game.findByGenre=SELECT id, name, genre, price FROM Games WHERE genre = ? ORDER BY name ASC


# query para insertar una librería para un usuario
library.insert=INSERT INTO Libraries (user_id) VALUES (?);
# Check if a game is in the user's library
library.isGameInLibrary=SELECT 1 FROM LibraryGames WHERE library_id = ? AND game_id = ?;
# Get games in the user's library
library.getGamesByUserId=SELECT g.id, g.name, g.genre, g.price, lg.state \
FROM LibraryGames lg \
JOIN Games g ON lg.game_id = g.id \
WHERE lg.library_id = (SELECT id FROM Libraries WHERE user_id = ?);
library.getGamesByGenreUser=SELECT g.id AS id, g.name, g.genre, g.price, lg.state \
FROM LibraryGames lg \
JOIN Games g ON lg.game_id = g.id \
WHERE lg.user_id = ? AND g.genre LIKE ?
# Add a game to the user's library
library.addGame=INSERT INTO LibraryGames (library_id, user_id, game_id, state) VALUES (?, ?, ?, ?);
# Remove a game from the library
library.removeGame=DELETE FROM LibraryGames WHERE library_id = ? AND game_id = ?;
# Update the state of a game in the library
library.updateGameState=UPDATE LibraryGames SET state = ? WHERE game_id = ? AND user_id = ?;
library.getLibraryIdByUserId=SELECT id FROM Libraries WHERE user_id = ?;
library.getAllGenres=SELECT DISTINCT genre FROM Games;
library.getGamesByGenre=SELECT id, name, genre, price, state FROM Games WHERE genre LIKE ?;

# Queries para Amistades
# Search users by name
friendship.searchUsers=SELECT id, name, email, role FROM Users WHERE id = ?;
friendship.getUserIdByUserEmail=SELECT id FROM Users WHERE email = ?;
# Get friends of a user
friendship.getFriends=SELECT u.id, u.name, u.email, u.role \
FROM Friendships f \
JOIN Users u ON (f.requester_id = u.id OR f.receiver_id = u.id) \
WHERE (f.requester_id = ? OR f.receiver_id = ?) AND f.status = 'Accepted' AND u.id != ?;
# Send a friend request
friendship.sendRequest=INSERT INTO Friendships (requester_id, receiver_id, status) VALUES (?, ?, ?);
# Get pending requests for a user
friendship.getRequests=SELECT id, requester_id, receiver_id, status FROM Friendships WHERE receiver_id = ? AND status = 'Pending';
# Update request status
friendship.updateStatus=UPDATE Friendships SET status = ? WHERE id = ?;
# Consulta para verificar si dos usuarios ya son amigos
friendship.checkFriendship=SELECT 1 FROM Friendships WHERE \
((requester_id = ? AND receiver_id = ?) OR (requester_id = ? AND receiver_id = ?)) \
AND status = 'Accepted'
# Consulta para verificar si existe una solicitud de amistad pendiente
friendship.checkPendingRequest=SELECT 1 FROM Friendships WHERE \
((requester_id = ? AND receiver_id = ?) OR (requester_id = ? AND receiver_id = ?)) \
AND status = 'Pending'


# Queries para Reseñas
review.findByGameId=SELECT * FROM Reviews WHERE game_id = ?
review.insert=INSERT INTO Reviews (comment, rating, user_id, game_id) VALUES (?, ?, ?, ?)
review.delete=DELETE FROM Reviews WHERE id = ?